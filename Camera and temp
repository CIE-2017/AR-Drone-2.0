#include <SoftwareSerial.h> 
#include <ESP8266HTTPClient.h>
#include <ESP8266WiFi.h>

#define URI "http://172.20.10.3:8000/drone/cam/upload"

#define TEMP_PIN A0
byte incomingbyte;

//Configure pin 4 and 5 as soft serial port
SoftwareSerial cameraSerial = SoftwareSerial(4, 5); 

//SoftwareSerial GPSModule(12, 11); // TX, RX

int a=0x0000,  //Read Starting address     
    j=0,
    k=0,
    count=0;
uint8_t MH,ML;
boolean EndFlag=0;


void setup() { 
  Serial.begin(115200);
  cameraSerial.begin(38400);  
  //GPSModule.begin(9600);
  setupWifi();     
  SendResetCmd();
  ChangeSizeSmall();
  SendResetCmd();
}

void loop() {
  float tempC = (5.0 * analogRead(TEMP_PIN) * 100.0) / 1540;
  String temp = "";
  if (tempC > 70) {
    String cam = camFunc();
//    Serial.println(cam); 
    //String gps = gpsFunc();
    //Serial.println(gps); 
    temp.concat(tempC);
    Serial.println(temp); 
    String res = makeRequest(cam,temp);
    Serial.println(res); 
  }
}

void setupWifi(){
  //Serial connection
  WiFi.begin("BrightYoshinon", "brightktt");   //WiFi connection

  while (WiFi.status() != WL_CONNECTED) {  //Wait for the WiFI connection completion
      delay(500);
      Serial.println("Waiting for connection");
  }
  Serial.println("Connected"); 
}


String makeRequest(String pic,String temp){
    Serial.print("Start HTTP ");
    String res;
    String body = "";
    body.concat("tem=");
    body.concat(temp);
    //body.concat("&gps=");
    //body.concat(gps);
    body.concat("&pic=");
    body.concat(pic);
    
    HTTPClient http;
    http.begin(URI);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");
    int httpCode = http.POST(body);
    
    Serial.print("HTTP status: ");
    Serial.println(httpCode);
    Serial.println(body);
    res = http.getString();
    http.end();
    return res;
}

String camFunc(){
  String total = "";
  SendTakePhotoCmd();

  Serial.println("Start pic"); 
  delay(3000);

  while(cameraSerial.available()>0) {
    incomingbyte=cameraSerial.read();
  }
  byte b[32];
      
  Serial.println("read"); 
  while(!EndFlag) {  
    j=0;
    k=0;
    count=0;
    SendReadDataCmd();
           
    delay(75); //try going up
    
  Serial.println(cameraSerial.available()); 
    while(cameraSerial.available()>0) {
      incomingbyte=cameraSerial.read();
      k++;
      if((k>5)&&(j<32)&&(!EndFlag)) {
        b[j]=incomingbyte;
        if((b[j-1]==0xFF)&&(b[j]==0xD9))
        EndFlag=1;                           
        j++;
        count++;
      }
    }
            
      
    for(j=0;j<count;j++) {   
      if(b[j]<0x10){
        total.concat("0");
      }
      total.concat(String(b[j], HEX));
    }
  }
  delay(3000);
  StopTakePhotoCmd(); //stop this picture so another one can be taken
  EndFlag = 0; //reset flag to allow another picture to be read
  total.toUpperCase();
  Serial.println(); 
  Serial.println("End of pic");
  Serial.println(); 
  return total;
}

void ChangeSizeSmall() {
    cameraSerial.write((byte)0x56);
    cameraSerial.write((byte)0x00);
    cameraSerial.write((byte)0x31);
    cameraSerial.write((byte)0x05);
    cameraSerial.write((byte)0x04);
    cameraSerial.write((byte)0x01);
    cameraSerial.write((byte)0x00);
    cameraSerial.write((byte)0x19);
    cameraSerial.write((byte)0x22);
}

//Send Reset command
void SendResetCmd() {
  cameraSerial.write((byte)0x56);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x26);
  cameraSerial.write((byte)0x00);   
}

//Send take picture command
void SendTakePhotoCmd() {
  cameraSerial.write((byte)0x56);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x36);
  cameraSerial.write((byte)0x01);
  cameraSerial.write((byte)0x00);
    
  a = 0x0000; //reset so that another picture can taken
}

void FrameSize() {
  cameraSerial.write((byte)0x56);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x34);
  cameraSerial.write((byte)0x01);
  cameraSerial.write((byte)0x00);  
}

//Read data
void SendReadDataCmd() {
  MH=a/0x100;
  ML=a%0x100;
      
  cameraSerial.write((byte)0x56);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x32);
  cameraSerial.write((byte)0x0c);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x0a);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)MH);
  cameraSerial.write((byte)ML);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x20);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x0a);

  a+=0x20; 
}

void StopTakePhotoCmd() {
  cameraSerial.write((byte)0x56);
  cameraSerial.write((byte)0x00);
  cameraSerial.write((byte)0x36);
  cameraSerial.write((byte)0x01);
  cameraSerial.write((byte)0x03);        
}
